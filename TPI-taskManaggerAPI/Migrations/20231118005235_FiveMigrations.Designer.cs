// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPI_taskManaggerAPI.DBContext;

#nullable disable

namespace TPItaskManaggerAPI.Migrations
{
    [DbContext(typeof(taskManaggerContext))]
    [Migration("20231118005235_FiveMigrations")]
    partial class FiveMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            ClientId = 3,
                            Content = "This is a comment on the task",
                            TaskId = 1
                        });
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TaskId");

                    b.HasIndex("AdminId");

                    b.HasIndex("AdminId1");

                    b.HasIndex("ClientId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            AdminId = 1,
                            ClientId = 3,
                            Description = "This is an example task",
                            Name = "Example Task"
                        });
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Admin", b =>
                {
                    b.HasBaseType("TPI_taskManaggerAPI.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "roncoronit@gmail.com",
                            Password = "123",
                            UserName = "Tomas",
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Client", b =>
                {
                    b.HasBaseType("TPI_taskManaggerAPI.Entities.User");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "javitonini@gmail.com",
                            Password = "123",
                            UserName = "Javier",
                            UserType = "Client"
                        });
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Comment", b =>
                {
                    b.HasOne("TPI_taskManaggerAPI.Entities.Admin", null)
                        .WithMany("Comments")
                        .HasForeignKey("AdminId");

                    b.HasOne("TPI_taskManaggerAPI.Entities.Client", "Client")
                        .WithMany("Comments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPI_taskManaggerAPI.Entities.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Task", b =>
                {
                    b.HasOne("TPI_taskManaggerAPI.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPI_taskManaggerAPI.Entities.Admin", null)
                        .WithMany("Tasks")
                        .HasForeignKey("AdminId1");

                    b.HasOne("TPI_taskManaggerAPI.Entities.Client", "Client")
                        .WithMany("AssginedTask")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Task", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Admin", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TPI_taskManaggerAPI.Entities.Client", b =>
                {
                    b.Navigation("AssginedTask");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
